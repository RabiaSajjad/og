<?php

/**
 * @file
 * Contains voting_webform.module.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\webform\WebformSubmissionInterface;

/**
 * Implements template_preprocess_webform().
 */
function voting_webform_preprocess_webform(array &$variables) {
  $webform_id = $variables['element']['#webform_id'];
  if ($webform_id === 'vote') {
    $uuid = \Drupal::request()->query->get('uuid');
    $vote_result = getAverageVoteAndCount($uuid, $webform_id);
    if ($vote_result) {
      $variables['vote_average'] = $vote_result['average'];
      $variables['vote_count'] = $vote_result['count'];
    }
  }
  elseif ($webform_id === 'app_vote') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface
      && $node->hasField('field_vote_count')
      && $node->hasField('field_vote_average')) {
      $variables['vote_count'] = $node->get('field_vote_count')->value;
      $variables['vote_average'] = $node->get('field_vote_average')->value;
    }
  }
  elseif ($webform_id === 'vote_up_down') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface && $node->hasField('field_vote_up_down')) {
      $variables['vote_up_down_value'] = $node->get('field_vote_up_down')->value;
    }
  }
  elseif ($webform_id === 'vote_up_down_external') {
    // get uuid from url
    $url = \Drupal::request()->getRequestUri();
    if ($url) {
      $url_clean = explode("?",$url);
      $url_explode = explode("/",$url_clean[0]);
      $uuid = end($url_explode);
      // get vote count for uuid
      $connection = \Drupal::database();
      $query = $connection->select('external_voting', 'v');
      $query->condition('v.uuid', $uuid, '=');
      $query->fields('v', ['vote_count']);
      $result = $query->execute();
      $vote_count=0;
      foreach ($result as $record) {
        $vote_count = $record->vote_count;
      }

      $variables['vote_up_down_value'] = $vote_count;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function voting_webform_webform_submission_prepare_form(WebformSubmissionInterface $webform_submission, $operation, FormStateInterface $form_state)
{
  // Get the submission's Webform.
  $webform = $webform_submission->getWebform();

  if ($webform->id() === 'vote') {
    $url = \Drupal::request()->headers->get('referer');
    if ($url) {
      // set referred_url to send back to the referring page
      $webform_submission->setElementData('referred_url', $url);
    }
    else {
      \Drupal::logger('vote')->warning($webform->id() . ': No referring URL found');
    }
  }
  elseif ($webform->id() === 'vote_up_down_external') {
    $url = \Drupal::request()->getRequestUri();
    if ($url) {
      // set referred_url to send back to the referring page
      $webform_submission->setElementData('referred_url', $url);
      $url_explode = explode("/",$url);
      $uuid = end($url_explode);
      $webform_submission->setElementData('uuid', $uuid);
    }
    else {
      \Drupal::logger('vote')->warning($webform->id() . ': No referring URL found');
    }
  }
}

/**
 * Return average vote and vote count for a dataset uuid
 */
function getAverageVoteAndCount($uuid, $webform_id)
{
  if (empty($uuid)) {
    return NULL;
  }

  try {
    // get current vote count and average
    $connection = \Drupal::database();
    $query = $connection->select('external_rating', 'v');
    $query->condition('v.uuid', $uuid, '=');
    $query->fields('v', ['vote_count', 'vote_average']);
    $result = $query->execute();
    $vote_count = 0;
    $vote_average = 0;

    foreach ($result as $record) {
      $vote_count = $record->vote_count;
      $vote_average = round($record->vote_average);
    }

    $vote_result["average"] = $vote_average;
    $vote_result["count"] = $vote_count;
    return $vote_result;
  }

  catch (Exception $e) {
    \Drupal::logger('vote')->warning($webform_id . ': Exception thrown while trying to get vote average for dataset with uuid: ' . $uuid);
    return NULL;
  }
}

/**
 * Implements hook_cron().
 * Export dataset ratings as CSV
 */
function voting_webform_cron() {
  try {
    // fetch ratings from database
    $database = \Drupal::database();
    $result = $database->query("SELECT uuid, vote_average, vote_count, 
                            CONCAT('https://open.canada.ca/data/en/dataset/', uuid) as url_en,
                            CONCAT('https://ouvert.canada.ca/data/fr/dataset/', uuid) as url_fr 
                          FROM {external_rating} 
                          WHERE type = :type
                          ORDER BY vote_average DESC, vote_count DESC", [':type' => 'dataset',]);

    if (!$result) {
      throw new Exception('Failed to return results from database.');
    }

    // fetch dataset titles from ckan
    $datasets = [];
    $filename = 'sites/default/files/od-do-canada.jl.gz';
    $handle = gzopen($filename, 'r');
    if (!$handle) {
      throw new Exception('Failed to open Portal Catalogue dataset.');
    }

    while (!gzeof($handle)) {
      $line = gzgets($handle);
      $data = json_decode($line, TRUE);
      $datasets[$data['id']] = ['en' => $data['title_translated']['en'], 'fr' => $data['title_translated']['fr']];
    }
    gzclose($handle);

    if (!sizeof($datasets)) {
      throw new Exception('Failed to read content from Portal Catalogue dataset.');
    }

    // create output csv
    $output = fopen('sites/default/files/dataset_ratings.csv', 'w');
    if (!$output) {
      throw new Exception('Failed to create export file.');
    }

    // add BOM to fix UTF-8 in Excel
    fputs($output, $bom = (chr(0xEF) . chr(0xBB) . chr(0xBF)));
    // add csv header columns
    $header = ['Dataset Title (English)',
      'Dateset Title (French)',
      'Dataset UUID',
      'Rating Score',
      'Number of times dataset is rated',
      'Link to Dataset (English)',
      'Link to Dataset (French)',
    ];
    fputcsv($output, $header, ',', '"');

    // write to csv
    while ($row = $result->fetchAssoc()) {
      if (array_key_exists($row['uuid'], $datasets)) {
        $row = [ 'fr' => $datasets[$row['uuid']]['fr'] ] + $row;
        $row = [ 'en' => $datasets[$row['uuid']]['en'] ] + $row;
        fputcsv($output, $row, ',', '"');
      }
    }

    \Drupal::logger('export')->notice('Dataset ratings exported');
    fclose($output);
  }

  catch (Exception $e) {
    \Drupal::logger('export')->error('Unable to export dataset ratings ' . $e->getMessage());
  }
}
