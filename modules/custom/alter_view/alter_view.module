<?php

use Drupal\Core\Cache\Cache;
use Drupal\Core\Render\Markup;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\Views;
use \Drupal\views\ViewExecutable;

/**
 * @file
 * Contains alter_view.module.
 */

/**
 * Implements hook_views_pre_render
 * modify solr searches
 * show language specific fields and sorts
 * example description_en when English is the current language and description_fr when French is the current language
 */
function alter_view_views_pre_render(ViewExecutable $view) {
  $language_manager = \Drupal::service('language_manager');
  $currentLang = $language_manager->getCurrentLanguage()->getId();
  $field_to_disable = $currentLang == 'en' ? 'fr' : 'en';

  $views = [
    'pd_core_ati', 'pd_core_ati_details',
    'pd_core_contracts', 'pd_core_contracts_details',
    'pd_core_grants', 'pd_core_grants_details',
    'pd_core_hospitalityq', 'pd_core_hospitalityq_details',
    'pd_core_inventory', 'pd_core_inventory_details',
    'pd_core_reclassification', 'pd_core_reclassification_details',
    'pd_core_travela', 'pd_core_travela_details',
    'pd_core_travelq', 'pd_core_travelq_details',
    'pd_core_wrongdoing', 'pd_core_wrongdoing_details',
  ];

  if (in_array($view->id(), $views)) {

    // disable fields in other language
    foreach ($view->field as $field) {
      if (strpos($field->field, '_' . $field_to_disable) !== FALSE) {
        unset($view->field[$field->field]);
      }
    }

    // disable sorts in other language only for the list views
    if (strpos($view->id(), '_details') === FALSE
      && is_array($view->exposed_widgets)
      && array_key_exists('sort_by', $view->exposed_widgets)
      && array_key_exists('#options', $view->exposed_widgets['sort_by'])) {

      foreach ($view->exposed_widgets['sort_by']['#options'] as $key => $value) {
        if (strpos($key, '_' . $field_to_disable) !== FALSE) {
          unset($view->exposed_widgets['sort_by']['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_view
 * attach external comment form to the footer of view pd_core_inventory_details
 */
function alter_view_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'pd_core_inventory_details') {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'empty' => false,
      'tokenize' => false,
      'content' => [
        'value' => '<div data-ajax-replace="/' . $language . '/external-comment/inventory/' . $view->args[0] . '" ></div>',
        'format' => 'full_html',
      ],
      'plugin_id' => 'text',
    );
    $view->setHandler($display_id, 'footer', 'area', $options);
  }
}

/**
 * Implements template_preprocess_views_bootstrap_table
 * add vote column to pd_core_inventory
 */
function alter_view_preprocess_views_bootstrap_table(array &$variables) {
  $view = $variables['view'];
  if (is_object($view) && $view->id() === 'pd_core_inventory') {
    for ($x=0; $x< sizeof($variables['rows']); $x++) {
      $uuid = $view->result[$x]->_item->getField('id')->getValues();
      $connection = \Drupal::database();
      $query = $connection->select('external_voting', 'v');
      $query->condition('v.uuid', $uuid, '=');
      $query->fields('v', ['vote_count']);
      $result = $query->execute();
      $vote_count=0;
      foreach ($result as $record) {
        $vote_count = $record->vote_count;
      }

      $variables['rows'][$x]['columns']['nothing']['content'][0]['field_output']['#markup']= Markup::create($vote_count);
    }
  }
}

/**
 * Implements hook_cron().
 * clear cache of views generated using Solr
 */
function alter_view_cron() {
  $pd_views = [
    'pd_core_ati',
    'pd_core_contracts',
    'pd_core_grants',
    'pd_core_inventory',
    'pd_core_hospitalityq',
    'pd_core_reclassification',
    'pd_core_travela',
    'pd_core_travelq',
    'pd_core_wrongdoing',
  ];

  foreach ($pd_views as $view_name) {
    $view = Views::getView($view_name);
    if ($view) {
      $tags = $view->getCacheTags();
      Cache::invalidateTags($tags);
      \Drupal::logger('cron')->notice('Cache cleared for ' . $view->getTitle());
    }
  }
}

/**
 * Set dynamic allowed values for organization field
 * The options will be same as CKAN
 */
function fetch_orgs_from_ckan(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $filename = './od-do-orgs.jsonl';
  $contents = file($filename);
  $options = [];
  $idx = $langcode == 'en' ? 0 : 1;
  foreach ($contents as $line)
  {
      $data = json_decode($line);
      $title = explode('|', $data->title);
      if (array_key_exists($idx, $title)) { $options[trim($title[$idx])] = trim($title[$idx]); }
  }

  ksort($options);
  return $options;
}

/**
 * Provide dynamic allowed values for the status field of Suggested Dataset
 */
function get_suggested_dataset_status(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($langcode == 'fr') {
    $options = [
      'department_contacted' => 'Ministère contacté',
      'under_review' => 'Sous examen',
      'in_progress' => 'En cours',
      'released' => 'Publié',
      'not_collected' => 'Non recueillies par le gouvernement du Canada',
    ];
  }
  else {
    $options = [
      'department_contacted' => 'Department Contacted',
      'under_review' => 'Under Review',
      'in_progress' => 'In-progress',
      'released' => 'Released',
      'not_collected' => 'Not Collected by the Government of Canada',
    ];
  }
  
  return $options;
}

/**
 * Migrate values for new fields of Suggested Dataset
 * New fields include:
 * Allowed list for field_organization
 * Allowed list for field_sd_status
 * field_date_published for dataset release date
 */
function alter_view_update_8001() {
  // 1. gather organizations
  $filename = '/data/static/od-do-orgs.jsonl';
  $contents = file($filename);
  $organization_en = [];
  $organization_fr = [];

  foreach ($contents as $line)
  {
      $data = json_decode($line);
      $title = explode('|', $data->title);
      if (array_key_exists(0, $title)) { $organization_en[trim($title[0])] = trim($title[0]); }
      if (array_key_exists(1, $title)) { $organization_fr[trim($title[1])] = trim($title[1]); }
  }

  // 2. gather status
  $status_en = [
    'department_contacted' => 'Department Contacted',
    'under_review' => 'Under Review',
    'in_progress' => 'In-progress',
    'released' => 'Released',
    'not_collected' => 'Not Collected by the Government of Canada',
  ];

  $status_fr = [
    'department_contacted' => 'Ministère contacté',
    'under_review' => 'Sous examen',
    'in_progress' => 'En cours',
    'released' => 'Publié',
    'not_collected' => 'Non recueillies par le gouvernement du Canada',
  ];

  // 3. fetch the file with clean data
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule(basename(__FILE__, '.module'))->getPath();
  $files = file_scan_directory($module_path, '/.csv$/');

  foreach($files as $file) {
    $csv = fopen($file->uri, 'r');
    $fields = fgetcsv($csv);
    $key_nid = array_search('ID', $fields);
    $key_org = array_search('Organization', $fields);
    $key_status = array_search('Status', $fields);
    $key_released = array_search('Date Dataset was Released', $fields);
    $key_langcode = array_search('Language', $fields);

    while (($row = fgetcsv($csv, 1024, ",")) !== FALSE) {
      $row = array_map("utf8_encode", $row);
      try {
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($row[$key_nid]);
        if ($node && $node->bundle() == 'suggested_dataset') {
          $organization = $row[$key_langcode] == 'English' ? $organization_en : $organization_fr;
          $status = $row[$key_langcode] == 'English' ? $status_en : $status_fr;
          if ($row[$key_langcode] != 'English') {
            $node = $node->getTranslation('fr');
          }

          // check if valid organization name
          if (array_search($row[$key_org], $organization) == FALSE) {
            \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid organization: ' . $row[$key_org]);
          } else {
            $node->set('field_organization', $row[$key_org]);
          }
          // check if valid status
          $idx = array_search($row[$key_status], $status);
          if ($idx == FALSE) {
            \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid status: ' . $row[$key_status]);
          } else {
            $node->set('field_sd_status', $idx);
            if ($idx == 'released' && $row[$key_released]) {
              // check if valid released date
              $released_date = DateTime::createFromFormat('Y/m', $row[$key_released]);
              if ($released_date == FALSE) {
                \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid date: ' . $row[$key_released]);
              } else {
                $released_date;
                $node->set('field_date_published', $released_date->format('Y-m-01'));
              }
            }
          }
        $node->save();
        } else {
          // node not found
          \Drupal::logger('migration')->error($row[$key_langcode] . $row[$key_nid] . ' node not found');
          dump($row[$key_langcode] . $row[$key_nid] . ' node not found');
        }
      } catch (Exception $e) {
        \Drupal::logger('migration')->error($e->getMessage());
      }
    }

    fclose($csv);
  }
}