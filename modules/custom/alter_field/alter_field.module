<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * @file
 * Contains alter_field.module.
 */

/**
 * Set dynamic allowed values for organization field
 * The options will be same as CKAN
 */
function fetch_orgs_from_ckan() {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  // Load cached options, if exist
  if ($cache = \Drupal::cache()->get('ckan_orgs_' . $langcode)) {
    $options = $cache->data;
    return $options;
  }

  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $filename = 'sites/default/files/od-do-orgs.jsonl';
  $contents = file($filename);
  $options = [];
  $idx = $langcode == 'en' ? 0 : 1;
  foreach ($contents as $line)
  {
    $data = json_decode($line);
    $title = explode('|', $data->title);
    if (array_key_exists($idx, $title)) { $options[trim($title[$idx])] = trim($title[$idx]); }
  }

  ksort($options);

  // Cache options
  \Drupal::cache()->set('ckan_orgs_' . $langcode, $options);

  return $options;
}

/**
 * Set dynamic allowed values for dataset format field
 * The options will be same as CKAN
 */
function fetch_dataset_format_from_ckan() {
  // Load cached options, if exist
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($cache = \Drupal::cache()->get('ckan_dataset_format_' . $langcode)) {
    $options = $cache->data;
    return $options;
  }

  $options = [];
  $url = 'https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset';
  $url = filter_var($url, FILTER_SANITIZE_URL);
  if (filter_var($url, FILTER_VALIDATE_URL) !== FALSE) {
    $client = \Drupal::httpClient();
    try {
      $request = $client->get($url);
      if ($request->getStatusCode() == '200') {
        $response = $request->getBody()->getContents();
        $data = json_decode($response, TRUE);

        foreach ($data['result']['resource_fields'] as $rsc) {
          if ($rsc['field_name'] == 'format') {
            foreach ($rsc['choices'] as $choice) {
              if (array_key_exists('label', $choice)) {
                $value = is_array($choice['label']) ?  $choice['label'][$langcode] : $choice['label'];
                $options[$value] = $value;
              }
              else {
                $options[$choice['value']] = $choice['value'];
              }
            }
            break;
          }
        }

        // Cache options
        \Drupal::cache()->set('ckan_dataset_format_' . $langcode, $options);
      }
    }
    catch (Exception $e) {
      \Drupal::logger('fetch from api')->error('Unable to fetch from api for ' . $url
        . ' Exception: ' . $e->getMessage());
    }
  }

  return $options;
}

/**
 * Provide dynamic allowed values for the status field of Suggested Dataset
 */
function get_suggested_dataset_status() {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($langcode == 'fr') {
    $options = [
      'department_contacted' => 'Ministère contacté',
      'under_review' => 'Sous examen',
      'in_progress' => 'En cours',
      'released' => 'Publié',
      'not_collected' => 'Non recueillies par le gouvernement du Canada',
    ];
  }
  else {
    $options = [
      'department_contacted' => 'Department Contacted',
      'under_review' => 'Under Review',
      'in_progress' => 'In-progress',
      'released' => 'Released',
      'not_collected' => 'Not Collected by the Government of Canada',
    ];
  }

  return $options;
}

/**
 * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter
 */
function alter_field_webform_options_organization_alter(array &$options, array &$element) {
  $options = fetch_orgs_from_ckan();
}

/**
 * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter
 */
function alter_field_webform_options_dataset_format_alter(array &$options, array &$element) {
  $options = fetch_dataset_format_from_ckan();
}

/**
 * Migrate values for new fields of Suggested Dataset
 * New fields include:
 * Allowed list for field_organization
 * Allowed list for field_sd_status
 * field_date_published for dataset release date
 */
function alter_field_update_8001() {
  // 1. gather organizations
  $filename = 'sites/default/files/od-do-orgs.jsonl';
  $contents = file($filename);
  $organization_en = [];
  $organization_fr = [];

  foreach ($contents as $line)
  {
    $data = json_decode($line);
    $title = explode('|', $data->title);
    if (array_key_exists(0, $title)) { $organization_en[trim($title[0])] = trim($title[0]); }
    if (array_key_exists(1, $title)) { $organization_fr[trim($title[1])] = trim($title[1]); }
  }

  // 2. gather status
  $status_en = [
    'department_contacted' => 'Department Contacted',
    'under_review' => 'Under Review',
    'in_progress' => 'In-progress',
    'released' => 'Released',
    'not_collected' => 'Not Collected by the Government of Canada',
  ];

  $status_fr = [
    'department_contacted' => 'Ministère contacté',
    'under_review' => 'Sous examen',
    'in_progress' => 'En cours',
    'released' => 'Publié',
    'not_collected' => 'Non recueillies par le gouvernement du Canada',
  ];

  // 3. fetch the file with clean data
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule(basename(__FILE__, '.module'))->getPath();
  $files = file_scan_directory($module_path, '/.csv$/');

  foreach($files as $file) {
    $csv = fopen($file->uri, 'r');
    $fields = fgetcsv($csv);
    $key_nid = array_search('ID', $fields);
    $key_org = array_search('Organization', $fields);
    $key_status = array_search('Status', $fields);
    $key_released = array_search('Date Dataset was Released', $fields);
    $key_statuslink = array_search('StatusLink', $fields);
    $key_langcode = array_search('Language', $fields);

    while (($row = fgetcsv($csv, 1024, ",")) !== FALSE) {
      $row = array_map("utf8_encode", $row);
      if ($row[$key_nid]) {
        try {
          $node = \Drupal::entityTypeManager()->getStorage('node')->load($row[$key_nid]);
          if ($node && $node->bundle() == 'suggested_dataset') {
            $organization = $row[$key_langcode] == 'English' ? $organization_en : $organization_fr;
            $status = $row[$key_langcode] == 'English' ? $status_en : $status_fr;
            if ($row[$key_langcode] != 'English') {
              $node = $node->getTranslation('fr');
            }

            // check if valid organization name
            if (array_search($row[$key_org], $organization) == FALSE) {
              \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid organization: ' . $row[$key_org]);
            } else {
              $node->set('field_organization', $row[$key_org]);
            }
            // check if valid status
            $idx = array_search($row[$key_status], $status);
            if ($idx === FALSE) {
              \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid status: ' . $row[$key_status]);
            } else {
              $node->set('field_sd_status', $idx);
              if ($idx == 'released' && $row[$key_released]) {
                // check if valid released date
                if (preg_match("/^[0-9]{4}\/(0[1-9]|1[0-2])\/(0[1-9]|[1-2][0-9]|3[0-1])$/", $row[$key_released])) { // YYYY/MM/DD format
                  $released_date = DateTime::createFromFormat('Y/m/d', $row[$key_released])->format('Y-m-d');
                } else if (preg_match('/^[0-9]{4}\/(0[1-9]|1[0-2])$/', $row[$key_released])) { // YYYY/MM format
                  $released_date = DateTime::createFromFormat('Y/m', $row[$key_released])->format('Y-m-01');
                } else if (preg_match('/^[0-9]{4}$/', $row[$key_released])) { // YYYY format
                  $released_date = DateTime::createFromFormat('Y', $row[$key_released])->format('Y-01-01');
                }
                if ($released_date === FALSE) {
                  \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid date: ' . $row[$key_released]);
                } else {
                  $node->set('field_date_published', $released_date);
                }
                // check if valid status link
                if ($row[$key_statuslink] && filter_var($row[$key_statuslink], FILTER_VALIDATE_URL) === FALSE) {
                  \Drupal::logger('migration')->error($row[$key_statuslink] . ' - ' . $row[$key_nid] . ' - Invalid Status Link: ' . $row[$key_statuslink]);
                } else {
                  $node->set('field_status_link', $row[$key_statuslink]);
                }
              }
            }
            $node->save();
          } else {
            // node not found
            \Drupal::logger('migration')->error($row[$key_langcode] . $row[$key_nid] . ' node not found');
          }
        } catch (Exception $e) {
          \Drupal::logger('migration')->error($e->getMessage());
        }
      }
    }

    fclose($csv);
  }
}
