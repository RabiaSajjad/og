<?php

use \Drupal\node\Entity\Node;
use \Drupal\Component\Serialization\Json;

/**
* @file
* Contains alter_field.module.
*/

/**
 * Read from organizations json file
 */
function read_options_from_json($field_name) {
  $options = [];
  try{
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if (is_object($field_name) && ($field_name->getName() == 'field_organization'))
      $field_name = 'organizations';

    // Load cached options, if exist
    if ($cache = \Drupal::cache()->get('ckan_' . $field_name . '_' . $langcode)) {
      $options = $cache->data;
      return $options;
    }

    $module_handler = \Drupal::service('module_handler');
    $module_path = $module_handler->getModule('og_ext_cron')->getPath();
    $filename = $module_path . '/choices/' . $field_name . '.json';

    if (file_exists($filename) && $contents = file_get_contents($filename)) {
      $data = Json::decode($contents);
      foreach ($data as $key => $row) {
        $options[$key] = is_array($row)? $row[$langcode] : $row;
      }
      asort($options);

      // Cache options
      \Drupal::cache()->set('ckan_' . $field_name . '_' . $langcode, $options);
    } else
      \Drupal::logger('read from json')->error('Unable to read ' . $field_name . ' from json choices file ');

  } catch (\Exception $e) {
    \Drupal::logger('read from json')->error('Unable to read ' . $field_name . ' from json choices file ' . ' ' . $e->getMessage());
  }

  return $options;
}

/**
 * Provide dynamic allowed values for the status field of Suggested Dataset
 */
function get_suggested_dataset_status() {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($langcode == 'fr') {
    $options = [
      'department_contacted' => 'Envoyée au détenteur des données – En attente d’une réponse',
      'under_review' => 'Réponse reçue – Le détenteur des données enquête',
      'in_progress' => 'Le détenteur des données s’affaire à la publication du jeu de données',
      'released' => 'Jeu de données publié',
      'not_collected' => 'Jeu de données non détenu',
    ];
  }
  else {
    $options = [
      'department_contacted' => 'Referred to data-holder - Awaiting Response',
      'under_review' => 'Response received – data-holder investigating',
      'in_progress' => 'Data-holder working on releasing dataset',
      'released' => 'Dataset Published',
      'not_collected' => 'Dataset not held',
    ];
  }

  return $options;
}

/**
 * Provide dynamic allowed values for the subject field of Suggested Dataset
 */
function get_dataset_subject() {
  return read_options_from_json('subject');
}

/**
 * Migrate values for new fields of Suggested Dataset
 * New fields include:
 * Allowed list for field_organization
 * Allowed list for field_sd_status
 * field_date_published for dataset release date
 */
function alter_field_update_8001() {
  // 1. gather organizations
  $filename = 'sites/default/files/od-do-orgs.jsonl';
  $contents = file($filename);
  $organization_en = [];
  $organization_fr = [];

  foreach ($contents as $line)
  {
    $data = json_decode($line);
    $title = explode('|', $data->title);
    if (array_key_exists(0, $title)) { $organization_en[trim($title[0])] = trim($title[0]); }
    if (array_key_exists(1, $title)) { $organization_fr[trim($title[1])] = trim($title[1]); }
  }

  // 2. gather status
  $status_en = [
    'department_contacted' => 'Department Contacted',
    'under_review' => 'Under Review',
    'in_progress' => 'In-progress',
    'released' => 'Released',
    'not_collected' => 'Not Collected by the Government of Canada',
  ];

  $status_fr = [
    'department_contacted' => 'Ministère contacté',
    'under_review' => 'Sous examen',
    'in_progress' => 'En cours',
    'released' => 'Publié',
    'not_collected' => 'Non recueillies par le gouvernement du Canada',
  ];

  // 3. fetch the file with clean data
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule(basename(__FILE__, '.module'))->getPath();
  $files = file_scan_directory($module_path, '/.csv$/');

  foreach($files as $file) {
    $csv = fopen($file->uri, 'r');
    $fields = fgetcsv($csv);
    $key_nid = array_search('ID', $fields);
    $key_org = array_search('Organization', $fields);
    $key_status = array_search('Status', $fields);
    $key_released = array_search('Date Dataset was Released', $fields);
    $key_statuslink = array_search('StatusLink', $fields);
    $key_langcode = array_search('Language', $fields);

    while (($row = fgetcsv($csv, 1024, ",")) !== FALSE) {
      $row = array_map("utf8_encode", $row);
      if ($row[$key_nid]) {
        try {
          $node = \Drupal::entityTypeManager()->getStorage('node')->load($row[$key_nid]);
          if ($node && $node->bundle() == 'suggested_dataset') {
            $organization = $row[$key_langcode] == 'English' ? $organization_en : $organization_fr;
            $status = $row[$key_langcode] == 'English' ? $status_en : $status_fr;
            if ($row[$key_langcode] != 'English') {
              $node = $node->getTranslation('fr');
            }

            // check if valid organization name
            if (array_search($row[$key_org], $organization) == FALSE) {
              \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid organization: ' . $row[$key_org]);
            } else {
              $node->set('field_organization', $row[$key_org]);
            }
            // check if valid status
            $idx = array_search($row[$key_status], $status);
            if ($idx === FALSE) {
              \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid status: ' . $row[$key_status]);
            } else {
              $node->set('field_sd_status', $idx);
              if ($idx == 'released' && $row[$key_released]) {
                // check if valid released date
                if (preg_match("/^[0-9]{4}\/(0[1-9]|1[0-2])\/(0[1-9]|[1-2][0-9]|3[0-1])$/", $row[$key_released])) { // YYYY/MM/DD format
                  $released_date = DateTime::createFromFormat('Y/m/d', $row[$key_released])->format('Y-m-d');
                } else if (preg_match('/^[0-9]{4}\/(0[1-9]|1[0-2])$/', $row[$key_released])) { // YYYY/MM format
                  $released_date = DateTime::createFromFormat('Y/m', $row[$key_released])->format('Y-m-01');
                } else if (preg_match('/^[0-9]{4}$/', $row[$key_released])) { // YYYY format
                  $released_date = DateTime::createFromFormat('Y', $row[$key_released])->format('Y-01-01');
                }
                if ($released_date === FALSE) {
                  \Drupal::logger('migration')->error($row[$key_langcode] . ' - ' . $row[$key_nid] . ' - Invalid date: ' . $row[$key_released]);
                } else {
                  $node->set('field_date_published', $released_date);
                }
                // check if valid status link
                if ($row[$key_statuslink] && filter_var($row[$key_statuslink], FILTER_VALIDATE_URL) === FALSE) {
                  \Drupal::logger('migration')->error($row[$key_statuslink] . ' - ' . $row[$key_nid] . ' - Invalid Status Link: ' . $row[$key_statuslink]);
                } else {
                  $node->set('field_status_link', $row[$key_statuslink]);
                }
              }
            }
            $node->save();
          } else {
            // node not found
            \Drupal::logger('migration')->error($row[$key_langcode] . $row[$key_nid] . ' node not found');
          }
        } catch (\Exception $e) {
          \Drupal::logger('migration')->error($e->getMessage());
        }
      }
    }

    fclose($csv);
  }
}

/**
 * Update field_organization for content type Suggested Dataset
 * change field value to field code
 * for example changes Treasury Board to tbs_sct
 */
function alter_field_update_8002()
{
  // find allowed values and default values for field_organization
  $entityManager = \Drupal::service('entity_field.manager');
  $fields = $entityManager->getFieldDefinitions('node', 'suggested_dataset');
  $field_org = $fields['field_organization']->getFieldStorageDefinition();
  $options = options_allowed_values($field_org);
  $default = $fields['field_organization']->getDefaultValueLiteral()[0]['value'];

  // replace existing values with allowed values
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'suggested_dataset')
    ->execute();

  // if dataset suggestions exist
  if ($nids) {
    $nodes = Node::loadMultiple($nids);

    foreach ($nodes as $node) {
      $existing_value = $node->get('field_organization')->getValue()[0]['value'];
      $key = array_search($existing_value, $options);
      $new_value = $key ? $key : $default;
      $node->set('field_organization', $new_value);
      if ($node->hasTranslation('fr')) {
        $node_fr = $node->getTranslation('fr');
        $node_fr->set('field_organization', $new_value);
        $node_fr->save();
      }
      $node->save();
    }
  }
}
